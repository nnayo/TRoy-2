#!/usr/bin/pytho
# -*- coding: latin-1 -*-

project_names = ('minut_0', 'minut_1', 'minut_2', 'xbee', 'sd_0', 'sd_1')

import os
troll_path = os.environ['TROLL_PROJECTS']


sources = {
    'minut_0': ['minut.c', 'minut_task.c', 'servo.c', 'mpu6050.c', 'sc18is600.c', 'tk-off.c', 'minut_0.eeprom.c'],
    'minut_1': ['minut.c', 'minut_task.c', 'servo.c', 'mpu6050.c', 'sc18is600.c', 'tk-off.c', 'minut_1.eeprom.c'],
    'minut_2': ['minut.c', 'minut_task.c', 'servo.c', 'mpu6050.c', 'sc18is600.c', 'tk-off.c', 'minut_2.eeprom.c'],
    'xbee': ['xbee.c', 'xbee.eeprom.c'],
    'sd_0': ['sd.c', 'sd_0.eeprom.c'],
    'sd_1': ['sd.c', 'sd_1.eeprom.c'],
}

libs    = ['scalp', 'nanoK']
libpath = [troll_path + '/scalp', troll_path + '/nanoK']

mcu_target      = 'atmega328p'
optimize        = '-Os -mcall-prologues -fshort-enums -std=c99 '
includes        = [
                    '.',
                    troll_path + '/nanoK',
                    troll_path + '/scalp',
                    troll_path + '/simavr/simavr/sim/avr',
                  ]
cflags      = '-g -Wall -Wextra ' + optimize + '-mmcu=' + mcu_target
ldflags	    = '-g -Wall ' + optimize + '-mmcu=' + mcu_target + ' '
ldflags     += '-Wl,--undefined=_mmcu,--section-start=.mmcu=0x8000'


builder_hex = Builder(
	action = Action(
		"avr-objcopy -O ihex -R .eeprom -R .mmcu $SOURCE $TARGET", cmdstr = "$HEXCOMSTR"), 
		suffix = ".hex", 
		src_suffix = ".elf"
)

env = Environment(
	CC = 'avr-gcc',		\
	AR = 'avr-ar',		\
	CFLAGS = cflags,	\
	CPPPATH = includes,	\
	LINKFLAGS = ldflags,	\
)

env.Append( BUILDERS = { 'Hex': builder_hex, } )
for prj_name in project_names:
    env.Hex(prj_name, prj_name)

Export('env')

SConscript([troll_path + '/scalp/SConscript', troll_path + '/nanoK/SConscript'], exports='env')

for prj_name in project_names:
    srcs = [env.Object(src) for src in sources[prj_name]]
    elf = env.Program(prj_name + '.elf', srcs, LIBS = libs, LIBPATH = libpath)
    env.Default(elf)

    # autogen eeprom_frame.c file
    env.Depends(prj_name + '.eeprom.c', ['./gen_eeprom_frames.py', 'frame.py', 'minut_0.py', 'minut_1.py', 'minut_2.py', 'xbee.py', 'sd_0.py', 'sd_1.py'])
    env.Command(prj_name + '.eeprom.c', '', './gen_eeprom_frames.py')

    # generate a file with code and source
    env.Alias('lix', prj_name + '.elf', 'avr-objdump -h -sdx ' + prj_name + '.elf > ' + prj_name + '.lix')
    env.AlwaysBuild('lix')

    # give the size of the binary
    env.Alias('size', prj_name + '.elf', 'avr-size -t ' + prj_name + '.elf')
    env.AlwaysBuild('size')

    # load binary in flash
    env.Depends(prj_name + '.flash.hex', prj_name + '.elf')
    env.Command(prj_name + '.flash.hex', prj_name + '.elf', 'avr-objcopy -j .text -j .data -O ihex ' + prj_name + '.elf' + ' ' + prj_name + '.flash.hex')
    load = env.Alias('load', prj_name + '.flash.hex', 'avrdude -V -c arduino -p ATMEGA328P -P /dev/ttyACM0 -b 57600 -U flash:w:' + prj_name + '.flash.hex')
    env.AlwaysBuild(load)


    # download the frames in eeprom
    env.Depends(prj_name + '.eeprom.hex', prj_name + '.elf')
    env.Command(prj_name + '.eeprom.hex', prj_name + '.elf', 'avr-objcopy -j .eeprom --change-section-lma .eeprom=0 -O ihex ' + prj_name + '.elf' + ' ' + prj_name + '.eeprom.hex')

    env.Alias('eeprom', prj_name + '.eeprom.hex', 'avrdude -V -c arduino -p ATMEGA328P -D -P /dev/ttyACM0 -b 57600 -U eeprom:w:' + prj_name + '.eeprom.hex')
    env.AlwaysBuild('eeprom')

    env.Alias('eeprom_check', '', 'avrdude -V -c arduino -p ATMEGA328P -D -P /dev/ttyACM0 -b 57600 -U eeprom:r:eeprom_content.raw:h')
    env.AlwaysBuild('eeprom_check')

    # connect to target with a terminal
    env.Alias('term', '', 'avrdude -V -c arduino -p ATMEGA328P -D -P /dev/ttyACM0 -b 57600 -t')
    env.AlwaysBuild('term')


    # test with simavr
    env.Alias('sim_' + prj_name, prj_name + '.elf', 'time ' + troll_path + '/simavr/simavr/run_avr -t -v -s ' + troll_path + '/simavr/examples/sim/mpu6050.so ' + prj_name)
    env.AlwaysBuild('sim_' + prj_name)

    # extract frames from gtkwave_trace.vcd file
    env.Alias('log', 'gtkwave_trace.vcd', troll_path + '/interface_server/streamer.py localhost:7777 gtkwave_trace.vcd UDR0& sleep 1; ' + troll_path + '/interface_server/onflight_decode.py localhost:7777 > decoded.log')
    env.AlwaysBuild('log')


        # test with simavr & avr-gdb
    env.Alias('debug_' + prj_name, prj_name + '.elf', troll_path + '/simavr/simavr/run_avr -g -t -v -s ' + troll_path + '/simavr/examples/sim/mpu6050.so ' + prj_name + '.elf')
    env.AlwaysBuild('debug_' + prj_name)

    env.Alias('gdb', prj_name + '.elf', 'avr-gdb ' + prj_name + '.elf -n -x gdbinit_avr')
    env.AlwaysBuild('gdb')


# suppress reliquat files
env.Alias('clean', '', 'rm -f *~ *o */*.o *.a *.lis *.pyc *.elf *.eeprom.c *.vcd')
env.AlwaysBuild('clean')

